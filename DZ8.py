# # 1. Реализовать класс «Дата», функция-конструктор которого должна принимать дату в виде строки формата «день-месяц-год»
# # В рамках класса реализовать два метода. Первый, с декоратором @classmethod, должен извлекать число, месяц, год и
# # преобразовывать их тип к типу «Число». Второй, с декоратором @staticmethod, должен проводить валидацию числа,
# # месяца и года (например, месяц — от 1 до 12). Проверить работу полученной структуры на реальных данных.
class Data:
    def __init__(self, my_date):
        self.my_date = str(my_date)

    @classmethod
    def extract(cls, my_date):
        day_month_year = []

        for i in my_date.split():
            if i != '-': day_month_year.append(i)

        print(f'День {int(day_month_year[0])} месяц {int(day_month_year[1])} год {int(day_month_year[2])}')

    @staticmethod
    def valid(day, month, year):

        if 1 <= day <= 31:
            if 1 <= month <= 12:
                if 2020 >= year >= 0:
                    return f'All right'
                else:
                    return f'Неправильный год'
            else:
                return f'Неправильный месяц'
        else:
            return f'Неправильный день'

    def __str__(self):
        return f'Текущая дата {self.my_date}'

today = Data('09 - 08 - 2020')
print(today)
print(Data.extract('09 - 08 - 2020'))
print(today.extract('09 - 08 - 2020'))
print(Data.valid(35, 11, 2000))
print(Data.valid(11, 13, 2020))
print(Data.valid(11, 11, 2030))
print(Data.valid(10, 10, 2020))

# 2. Создайте собственный класс-исключение, обрабатывающий ситуацию деления на нуль. Проверьте его работу на данных,
# вводимых пользователем. При вводе пользователем нуля в качестве делителя программа должна корректно обработать эту
# ситуацию и не завершиться с ошибкой.

class MyError:
    def __init__(self, delimoe, delitel):
        self.delimoe = delimoe
        self.delitel = delitel

    @staticmethod
    def del_by_null(delimoe, delitel):
        try:
            return (delimoe / delitel)
        except:
            return (f"Деление на ноль недопустимо")


div = MyError(10, 100)
print(MyError.del_by_null(10, 0))
print(MyError.del_by_null(100, 10))
print(div.del_by_null(100, 0))
print(div.del_by_null(100, 1))

# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
# скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки. При вводе пользователем
# очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.


# 4. Начните работу над проектом «Склад оргтехники». Создайте класс, описывающий склад. А также класс «Оргтехника»,
# который будет базовым для классов-наследников. Эти классы — конкретные типы оргтехники (принтер, сканер, ксерокс).
# В базовом классе определить параметры, общие для приведенных типов. В классах-наследниках реализовать параметры,
# уникальные для каждого типа оргтехники.

class Orgtech:

    def __init__(self, brend, model, price, col):
        self.brend = brend
        self.model = model
        self.price = price
        self.col = col

    @staticmethod
    def method_org():
        print(f'На складе в наличии: ')

class Scanner(Orgtech):
    def __init__(self, brend, model, price, col):
        super().__init__(brend, model, price, col)
    def method_scanner(self):
        print(f'Сканер {self.brend} Модель {self.model} Цена {self.price} Количество {self.col} шт.')

class Printer(Orgtech):
    def __init__(self, brend, model, price, col):
        super().__init__(brend, model, price, col)
    def method_printer(self):
        print(f'Принтер {self.brend} Модель {self.model} Цена {self.price} Количество {self.col} шт.')

class Xerox(Orgtech):
    def __init__(self, brend, model, price, col):
        super().__init__(brend, model, price, col)
    def method_xerox(self):
        print(f'Ксерокс {self.brend} Модель {self.model} Цена {self.price} Количество {self.col} шт.')

my_xerox = Xerox('Canon', 'X-15', 10000, 10)
my_printer = Printer('Canon', 'DR-200', 8000, 25)
my_scanner = Scanner('Canon', 'R-120', 5800, 100)
Orgtech.method_org()
my_xerox.method_xerox()
my_printer.method_printer()
my_scanner.method_scanner()


# 5. Продолжить работу над первым заданием. Разработать методы, отвечающие за приём оргтехники на склад и передачу
# в определенное подразделение компании. Для хранения данных о наименовании и количестве единиц оргтехники, а также
# других данных, можно использовать любую подходящую структуру, например словарь.

# 6. Продолжить работу над вторым заданием. Реализуйте механизм валидации вводимых пользователем данных. Например,
# для указания количества принтеров, отправленных на склад, нельзя использовать строковый тип данных.
# Подсказка: постарайтесь по возможности реализовать в проекте «Склад оргтехники» максимум возможностей,
# изученных на уроках по ООП.


# # 7. Реализовать проект «Операции с комплексными числами». Создайте класс «Комплексное число», реализуйте перегрузку
# # методов сложения и умножения комплексных чисел. Проверьте работу проекта, создав экземпляры класса (комплексные числа)
# # и выполнив сложение и умножение созданных экземпляров. Проверьте корректность полученного результата.
#
class ComplexNumber:
    def __init__(self, a, b, *args):
        self.a = a
        self.b = b
        self.z = 'a + b * i'

    def __add__(self, other):
        print(f'Сумма двух комплексных чисел равна ')
        return f'z = {self.a + other.a} + {self.b + other.b} * i'


    def __str__(self):
        return f'z = {self.a} + {self.b} * i'


z_1 = ComplexNumber(1, 4)
z_2 = ComplexNumber(2, 5)
print(z_1)
print(z_2)
print(z_1 + z_2)
